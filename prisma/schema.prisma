// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

// FIXME:outputを変更するとerdが生成されない？
// generator erd {
//   provider = "prisma-erd-generator"
  // output   = "./public/ERD.svg"
// }

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")

  customerId         String? @map("customer_id")
  selectedPaymentId  String? @map("selected_payment_id")
  selectedAddressId  Int?    @map("selected_address_id")
  selectedShippingId Int?    @map("selected_shipping_id")

  accounts  Account[]
  sessions  Session[]
  bookmarks Book[]     @relation(name: "bookmarks")
  posts     Book[]     @relation(name: "posts")
  customer  Customer?
  shippings Shipping[]
  addresses Address[]

  @@map("users")
}

// NOTE:stripeのcustomer情報 → customerIDがあればいいからmodelは不要かもしれない
model Customer {
  id          String  @unique
  description String?
  email       String
  metadata    Json
  name        String
  phone       String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique @map("user_id")

  @@map("customers")
}

// https://www.prisma.io/docs/concepts/components/prisma-schema/relations/one-to-one-relations
model Address {
  id          Int    @id @default(autoincrement())
  city        String
  country     String
  line1       String
  line2       String
  postal_code String
  state       String

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @map("user_id")

  @@map("addresses")
}

model Shipping {
  id          Int    @id @default(autoincrement())
  city        String
  country     String
  line1       String
  line2       String
  postal_code String
  state       String

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @map("user_id")

  @@map("shippings")
}

model Book {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  price     Int?
  image     String?
  published Boolean   @default(false)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  bookmarked_users User[]     @relation(name: "bookmarks")
  categories       Category[]
  posted_user      User?      @relation(name: "posts", fields: [user_id], references: [id])
  user_id          Int?

  @@map("books")
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  books Book[]

  @@map("categories")
}
